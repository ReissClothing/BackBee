<?php

/*
 * Copyright (c) 2011-2015 Lp digital system
 *
 * This file is part of BackBee.
 *
 * BackBee is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * BackBee is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with BackBee. If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Charles Rouillon <charles.rouillon@lp-digital.fr>
 */

namespace BackBee\WebBundle\Renderer;

use BackBee\CoreDomain\Site\Layout;

/**
 * Interface for a renderer adapter.
 *
 * @category    BackBee
 *
 * @copyright   Lp digital system
 * @author      e.chau <eric.chau@lp-digital.fr>
 */
interface RendererAdapterInterface
{
    /**
     * Constructor; every RendererAdapter need to be construct with a AbstractRenderer
     *
     * @param AbstractRenderer $renderer
     */
    public function __construct(AbstractRenderer $renderer, array $config = []);

    /**
     * Returns array that contains every single file's extension managed by this adapter.
     *
     * @return array
     */
    public function getManagedFileExtensions();

    /**
     * Check if $filename exist in $templateDir; it also checks if the file is readable.
     *
     * @param string $filename
     * @param array  $templateDir array that contains every directories where it has to looking
     *                            for $filename
     *
     * @return boolean true if the filename was found into $templateDir and it's readable,
     *                 else it returns false
     */
    public function isValidTemplateFile($filename, array $templateDir);

    /**
     * Returns render of $filename template which is compute with $params and $vars.
     *
     * @param string $filename
     * @param array  $templateDir
     * @param array  $params
     *
     * @return string
     */
    public function renderTemplate($filename, array $templateDir, array $params = array(), array $vars = array());

    /**
     * Updates a file script of a layout.
     *
     * @param Layout $layout     The layout to update
     * @param string $layoutFile the layout with absolute path generated by ARendrer::updateLayout()
     *
     * @return string The filename of the updated script
     */
    public function updateLayout(Layout $layout, $layoutFile);

    /**
     * This is called everytime we clone a renderer.
     *
     * @param Renderer $renderer the new renderer
     */
    public function onNewRenderer(AbstractRenderer $renderer);

    /**
     * This is called everytime we restore previous renderer.
     *
     * @param Renderer $renderer the previous renderer
     */
    public function onRestorePreviousRenderer(AbstractRenderer $renderer);
}
