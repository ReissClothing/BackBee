# Security Component services and parameters

parameters:
    bbapp.securitycontext.class: BackBee\Security\SecurityContext
    bbapp.expression_language.class: BackBee\Security\Authorization\ExpressionLanguage
    bbapp.securitycontext.roles.prefix: ROLE_
    bbapp.securitycontext.role.apiuser: 'API_USER'

services:
#    security.voter.sudo:
#        class: BackBee\Security\Authorization\Voter\SudoVoter
#        arguments: [@bbapp]

    security.voter.bb_acl:
        class: BackBee\CoreDomainBundle\Security\Authorization\Voter\BBAclVoter
        arguments:
            - @security.acl.provider
            - @security.acl.object_identity_retrieval_strategy
            - @security.acl.security_identity_retrieval_strategy
            - @bb.security.acl.permission.map
            - @logger
            - false
        tags:
            - { name: security.voter }

#    security.role_hierarchy:
#        class: BackBee\Security\Role\RoleHierarchy
#        arguments: [[]]

    bb.security.acl.permission.map:
        class: BackBee\CoreDomainBundle\Security\Acl\Permission\PermissionMap

#    security.access.decision_manager:
#        class: BackBee\Security\Access\DecisionManager
#        arguments:
#            - [@security.voter.sudo, @security.voter.bb_role, @security.voter.role, @security.voter.authenticated, @security.voter.bb_acl]
#            - affirmative
#            - false
#            - true
#        calls:
#            - [setApplication, [@bbapp]]

#    security.acl_loader_yml:
#        class:      BackBee\Security\Acl\Loader\YmlLoader
#        calls:
#            - [setContainer, [@service_container]]

#    security.acl_manager:
#        class:      BackBee\Security\Acl\AclManager
#        arguments:  [@security.context, @security.acl.permission.map]